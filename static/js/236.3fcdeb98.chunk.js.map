{"version":3,"file":"static/js/236.3fcdeb98.chunk.js","mappings":"uQAeaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAkBjB,OA0BE,SAAC,KAAD,CAAMC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAtC,UACE,SAAC,KAAD,CACEC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAAAC,GACRd,GAASe,EAAAA,EAAAA,IAASD,IAClBE,QAAQC,IAAI,aAAcF,EAAAA,IAC1BC,QAAQC,IAAI,WAAYH,EACzB,EAVH,SAYG,gBAAGI,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMP,SAAUK,EAAcG,aAAa,MAA3C,UACE,UAAC,KAAD,CAAQC,QAAS,EAAGnB,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWoB,QAAQ,OAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,OACHhB,KAAK,OACLiB,KAAK,OACLC,QAAQ,eAGZ,UAAC,KAAD,YACE,SAAC,KAAD,CAAWL,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHhB,KAAK,QACLiB,KAAK,QACLC,QAAQ,eAGZ,UAAC,KAAD,CAAaC,YAAaV,EAAOP,UAAYQ,EAAQR,SAArD,WACE,SAAC,KAAD,CAAWW,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHhB,KAAK,WACLiB,KAAK,WACLC,QAAQ,SACRE,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,+CAGHA,CACR,KAEH,SAAC,KAAD,UAAmBb,EAAOP,eAE5B,SAAC,KAAD,CAAQe,KAAK,SAASO,YAAY,SAASC,MAAM,OAAjD,0BA3CL,OAqDV,ECrHD,EARiB,WACf,OACE,4BACE,6CACA,SAACpC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n// import css from './RegisterForm.module.css';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n\n  //   dispatch(\n  //     register({\n  //       name: form.elements.name.value,\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   console.log('register :', register);\n\n  //   form.reset();\n  // };\n\n  return (\n    // <form\n    //   // className={css.form}\n    //   onSubmit={handleSubmit}\n    //   autoComplete=\"off\"\n    // >\n    //   <label\n    //   // className={css.label}\n    //   >\n    //     Username\n    //     <input type=\"text\" name=\"name\" />\n    //   </label>\n    //   <label\n    //   // className={css.label}\n    //   >\n    //     Email\n    //     <input type=\"email\" name=\"email\" />\n    //   </label>\n    //   <label\n    //   // className={css.label}\n    //   >\n    //     Password\n    //     <input type=\"password\" name=\"password\" />\n    //   </label>\n    //   <button type=\"submit\">Register</button>\n    // </form>\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          onSubmit={values => {\n            dispatch(register(values));\n            console.log('register :', register);\n            console.log('values :', values);\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"name\">Username</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = 'Password must contain at least 6 characters';\n                      }\n\n                      return error;\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Register\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n};\nexport default Register;\n"],"names":["RegisterForm","dispatch","useDispatch","bg","align","justify","h","p","rounded","w","initialValues","name","email","password","onSubmit","values","register","console","log","handleSubmit","errors","touched","autoComplete","spacing","htmlFor","as","Input","id","type","variant","isInvalid","validate","value","error","length","colorScheme","width"],"sourceRoot":""}